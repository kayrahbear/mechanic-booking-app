# Cloud Build pipeline  (v1 format)
substitutions:
  _REGION: us-central1    # change if you move regions

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8  # Good balance of cost and performance

steps:
###############################################################################
# 1  Fetch Firebase config (needed for frontend build)
###############################################################################
- id: fetch-firebase-config
  name: gcr.io/cloud-builders/gcloud
  entrypoint: bash
  args:
    - -c
    - |
      echo "Fetching Firebase config from Secret Manager..."
      gcloud secrets versions access latest --secret=firebase-web-config --project=$PROJECT_ID > frontend/.env.local
      echo "Firebase config fetched successfully"

###############################################################################
# 2  Build all containers in parallel
###############################################################################
- id: backend-build
  name: gcr.io/cloud-builders/docker
  dir: backend
  waitFor: ['-']  # Start immediately, don't wait for other steps
  args: [
    'build','-t',
    '${_REGION}-docker.pkg.dev/$PROJECT_ID/backend-repo/backend:$SHORT_SHA',
    '--cache-from', '${_REGION}-docker.pkg.dev/$PROJECT_ID/backend-repo/backend:latest',
    '.'
  ]

- id: frontend-build
  name: gcr.io/kaniko-project/executor:latest
  dir: frontend
  waitFor: ['fetch-firebase-config']  # Only wait for config
  args:
    - --destination=${_REGION}-docker.pkg.dev/$PROJECT_ID/frontend-repo/frontend:$SHORT_SHA
    - --context=/workspace/frontend
    - --cache=true
    - --cache-ttl=24h
    - --cache-repo=${_REGION}-docker.pkg.dev/$PROJECT_ID/frontend-repo/cache

- id: worker-build
  name: gcr.io/cloud-builders/docker
  dir: backend/worker
  waitFor: ['-']  # Start immediately, don't wait for other steps
  args: [
    'build','-t',
    '${_REGION}-docker.pkg.dev/$PROJECT_ID/backend-repo/worker:$SHORT_SHA',
    '--cache-from', '${_REGION}-docker.pkg.dev/$PROJECT_ID/backend-repo/worker:latest',
    '.'
  ]

###############################################################################
# 3  Push all containers in parallel
###############################################################################
- id: backend-push
  name: gcr.io/cloud-builders/docker
  waitFor: ['backend-build']
  args: [
    'push',
    '${_REGION}-docker.pkg.dev/$PROJECT_ID/backend-repo/backend:$SHORT_SHA'
  ]


- id: worker-push
  name: gcr.io/cloud-builders/docker
  waitFor: ['worker-build']
  args: [
    'push',
    '${_REGION}-docker.pkg.dev/$PROJECT_ID/backend-repo/worker:$SHORT_SHA'
  ]

###############################################################################
# 4  Terraform apply (infra changes)
###############################################################################
- id: check-terraform-changes
  name: gcr.io/cloud-builders/git
  entrypoint: bash
  args:
    - -c
    - |
      # Check what type of changes we have
      CHANGED_FILES=$$(git diff --name-only HEAD~1 HEAD || echo "")
      
      if echo "$$CHANGED_FILES" | grep -E '^infra/'; then
        echo "Infrastructure changes detected - Full Terraform will run"
        echo "terraform-full" > /workspace/terraform-flag
      elif echo "$$CHANGED_FILES" | grep -E '^(backend/|frontend/|functions/)'; then
        echo "Code changes detected - Quick Cloud Run update will run"
        echo "cloudrun-update" > /workspace/terraform-flag
      else
        echo "No deployment changes - skipping updates"
        echo "terraform-skip" > /workspace/terraform-flag
      fi

- id: terraform-apply
  name: hashicorp/terraform:1.6.6  # Use newer terraform version that supports import blocks
  dir: infra
  waitFor: ['backend-push', 'frontend-build', 'worker-push', 'check-terraform-changes']  # Wait for all pushes
  entrypoint: /bin/sh                      # <â€” key fix: run shell, not terraform
  env:
    - GOOGLE_IMPERSONATE_SERVICE_ACCOUNT=terraform-sa@$PROJECT_ID.iam.gserviceaccount.com
  args:
    - -c
    - |
      FLAG=$$(cat /workspace/terraform-flag)
      
      if [ "$$FLAG" = "terraform-skip" ]; then
        echo "Skipping all updates - no relevant changes detected"
        exit 0
      elif [ "$$FLAG" = "cloudrun-update" ]; then
        echo "Quick Cloud Run update - code changes detected"
        
        # Update Cloud Run services with new images (much faster than full Terraform)
        gcloud run services update backend-api \
          --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/backend-repo/backend:$SHORT_SHA \
          --region=${_REGION} --quiet
          
        gcloud run services update frontend-ssr \
          --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/frontend-repo/frontend:$SHORT_SHA \
          --region=${_REGION} --quiet
          
        gcloud run services update notification-worker \
          --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/backend-repo/worker:$SHORT_SHA \
          --region=${_REGION} --quiet
          
        echo "Cloud Run services updated successfully"
        exit 0
      fi
      
      echo "Running full Terraform - infrastructure changes detected"
      
      # Initialize terraform with upgrade flag to ensure plugins are installed
      terraform init -upgrade \
        -backend-config="bucket=tfstate-${PROJECT_ID}" \
        -backend-config="prefix=live"

      # List current state for debugging
      echo "Current Terraform state:"
      terraform state list || true
      
      # Import Firestore database if not already in state
      if terraform state list google_firestore_database.default &>/dev/null; then
        echo "Firestore DB already imported."
      else
        terraform import google_firestore_database.default "projects/${PROJECT_ID}/databases/(default)" || true
      fi

      if terraform state list google_cloud_tasks_queue.notifications &>/dev/null; then
        echo "Cloud Tasks queue already imported."
      else
        terraform import google_cloud_tasks_queue.notifications "projects/${PROJECT_ID}/locations/${_REGION}/queues/notification-tasks" || true
      fi

      if terraform state list google_cloud_run_v2_service.backend &>/dev/null; then
        echo "Backend service already imported."
      else
        terraform import google_cloud_run_v2_service.backend "${_REGION}/backend-api" || true
      fi

      if terraform state list google_cloud_run_v2_service.frontend &>/dev/null; then
        echo "Frontend service already imported."
      else
        terraform import google_cloud_run_v2_service.frontend "${_REGION}/frontend-ssr" || true
      fi

      if terraform state list google_cloud_run_v2_service.worker &>/dev/null; then
        echo "Worker service already imported."
      else
        terraform import google_cloud_run_v2_service.worker "${_REGION}/notification-worker" || true
      fi

      if terraform state list google_secret_manager_secret.sendgrid &>/dev/null; then
        echo "SendGrid secret already imported."
      else
        terraform import google_secret_manager_secret.sendgrid "projects/${PROJECT_ID}/secrets/SENDGRID_KEY" || true
      fi

      if terraform state list google_secret_manager_secret.twilio &>/dev/null; then
        echo "Twilio secret already imported."
      else
        terraform import google_secret_manager_secret.twilio "projects/${PROJECT_ID}/secrets/TWILIO_SID" || true
      fi

      if terraform state list google_secret_manager_secret.firebase_web_config &>/dev/null; then
        echo "Firebase web config secret already imported."
      else
        terraform import google_secret_manager_secret.firebase_web_config "projects/${PROJECT_ID}/secrets/firebase-web-config" || true
      fi

      # Import module resources to avoid conflicts
      if terraform state list module.backend_service.google_cloud_run_service.this &>/dev/null; then
        echo "Module backend service already imported."
      else
        echo "Not importing module.backend_service as it's been commented out to avoid conflicts."
        # terraform import module.backend_service.google_cloud_run_service.this "${_REGION}/backend-api" || true
      fi

      # Before normal apply, remove any stale resources that were commented out
      echo "Checking for stale resources to remove from state..."
      
      # Check if module.backend_service is in the state
      if terraform state list | grep -q "module.backend_service"; then
        # Check if it's uncommented in the code
        if ! grep -q "^[^#/].*module \"backend_service\"" infra/main.tf; then
          echo "Removing commented out module.backend_service from state..."
          terraform state rm module.backend_service || true
        fi
      fi
      
      # Check if these direct resources are in state but commented in code
      if terraform state list | grep -q "google_secret_manager_secret.sendgrid"; then
        if grep -q "\/\*\|^#" infra/secrets.tf | grep -q "google_secret_manager_secret.*sendgrid"; then
          echo "Removing commented out google_secret_manager_secret.sendgrid from state..."
          terraform state rm google_secret_manager_secret.sendgrid || true
        fi
      fi
      
      if terraform state list | grep -q "google_secret_manager_secret.twilio"; then
        if grep -q "\/\*\|^#" infra/secrets.tf | grep -q "google_secret_manager_secret.*twilio"; then
          echo "Removing commented out google_secret_manager_secret.twilio from state..."
          terraform state rm google_secret_manager_secret.twilio || true
        fi
      fi

      if terraform state list | grep -q "google_secret_manager_secret.calendar_sa_key"; then
        echo "Removing directly managed calendar_sa_key from state as it's now in the module..."
        terraform state rm google_secret_manager_secret.calendar_sa_key || true
      fi

      # Remove managed secrets from state since we now use data sources
      echo "Removing any managed secrets from state since we're now using data sources..."
      for secret_name in GOOGLE_CLIENT_ID GOOGLE_CLIENT_SECRET firebase-web-config calendar-sync-sa; do
        terraform state rm "module.secrets.google_secret_manager_secret.this[\"$secret_name\"]" || echo "Secret $secret_name not in state or already removed"
      done

      # Apply changes with -refresh-only first to sync state, then apply actual changes
      terraform apply -refresh-only -auto-approve -input=false \
        -var="project_id=${PROJECT_ID}" \
        -var="region=${_REGION}" \
        -var="image_tag=${SHORT_SHA}" \
        -var="cloud_build_sa=${PROJECT_NUMBER}@cloudbuild.gserviceaccount.com" \
        -parallelism=10

      echo "Starting actual Terraform apply..."
      # Now apply the real changes with more verbose output
      TF_LOG=INFO terraform apply -auto-approve -input=false \
        -var="project_id=${PROJECT_ID}" \
        -var="region=${_REGION}" \
        -var="image_tag=${SHORT_SHA}" \
        -var="cloud_build_sa=${PROJECT_NUMBER}@cloudbuild.gserviceaccount.com" \
        -parallelism=10

###############################################################################
# (optional) Slack / webhook notifier
###############################################################################
# - id: notify
#   name: curlimages/curl
#   entrypoint: curl
#   args: ['-X','POST','https://hooks.slack.com/services/â€¦']

images:
- '${_REGION}-docker.pkg.dev/$PROJECT_ID/backend-repo/backend:$SHORT_SHA'
- '${_REGION}-docker.pkg.dev/$PROJECT_ID/backend-repo/worker:$SHORT_SHA'

timeout: 1800s   # 30 minutes
